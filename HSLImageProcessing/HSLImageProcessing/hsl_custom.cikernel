 vec3 rgb2hsv(vec3 c)
   {
 vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
 vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
 vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
 float d = q.x - min(q.w, q.y);
 float e = 1.0e-10;
 return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
   }

   vec3 hsv2rgb(vec3 c)
   {
 vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
 vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
 return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
   }

   vec3 smoothTreatment(vec3 hsv, float leftHue, float rightHue)
   {
    float smoothedHue = smoothstep(leftHue, rightHue, hsv.x);
    float hue = hsv.x + (leftHue + ((rightHue - leftHue) * smoothedHue));
float sat = hsv.y; //(leftEdge.y + ((rightEdge.y - leftEdge.y) * smoothedHue));
float lum = hsv.z; //(leftEdge.z + ((rightEdge.z - leftEdge.z) * smoothedHue));
    return vec3(hue, sat, lum);
   }



kernel vec4 kernelFunc(__sample pixel, float hue, float leftHue, float rightHue, float shift, float sense) {
 vec3 hsv = rgb2hsv(pixel.rgb);
float currentHue = hsv.x;

if (((leftHue < rightHue && currentHue >= leftHue && currentHue <= rightHue)) || (leftHue>= rightHue && (( currentHue >= leftHue && currentHue <=1.0) || (currentHue >=0.0 && currentHue <= rightHue)))) {
if (shift < 0) {
hsv = smoothTreatment(hsv, rightHue,leftHue);
} else {
hsv = smoothTreatment(hsv, leftHue, rightHue);
}
}

/*if (hue - sense < 0) {
if (currentHue >= 0 && currentHue <= hue || currentHue <= 1 && currentHue >= 1.0 + (hue - sense)){
hsv = smoothTreatment(hsv, leftHue, rightHue);
}
} else {
if (currentHue>= (hue - sense) && currentHue <= hue) {
hsv = smoothTreatment(hsv, leftHue, rightHue);
}
}
if (hue + sense > 1.0 ) {
if (currentHue >= 0 && currentHue <= (1.0 - (hue + sense)) || currentHue <= 1 && currentHue >= hue){
hsv = smoothTreatment(hsv, leftHue, rightHue);
}
}
else {
if (currentHue >= hue && currentHue<= (hue + sense)) {
hsv = smoothTreatment(hsv, leftHue, rightHue);
}
}*/

 return vec4(hsv2rgb(hsv), 1.0);
}



/*
 kernel vec4 kernelFunc(__sample pixel,
   vec3 redShift, vec3 orangeShift, vec3 yellowShift, vec3 greenShift,
   vec3 aquaShift, vec3 blueShift, vec3 purpleShift, vec3 magentaShift)
 {

  vec3 hsv = rgb2hsv(pixel.rgb);
  if (hsv.x < orange){                          hsv = smoothTreatment(hsv, 0.0, orange, redShift, orangeShift);}
  else if (hsv.x >= orange && hsv.x < yellow){  hsv = smoothTreatment(hsv, orange, yellow, orangeShift, yellowShift); }
  else if (hsv.x >= yellow && hsv.x < green){   hsv = smoothTreatment(hsv, yellow, green, yellowShift, greenShift);  }
  else if (hsv.x >= green && hsv.x < aqua){     hsv = smoothTreatment(hsv, green, aqua, greenShift, aquaShift);}
  else if (hsv.x >= aqua && hsv.x < blue){      hsv = smoothTreatment(hsv, aqua, blue, aquaShift, blueShift);}
  else if (hsv.x >= blue && hsv.x < purple){    hsv = smoothTreatment(hsv, blue, purple, blueShift, purpleShift);}
  else if (hsv.x >= purple && hsv.x < magenta){ hsv = smoothTreatment(hsv, purple, magenta, purpleShift, magentaShift);}
  else {                                        hsv = smoothTreatment(hsv, magenta, 1.0, magentaShift, redShift); };

 return vec4(hsv2rgb(hsv), 1.0);
 }
*/
